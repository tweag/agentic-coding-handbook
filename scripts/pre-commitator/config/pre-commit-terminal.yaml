repos:
  # General-purpose hooks for all file types
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v5.0.0
    hooks:
      - id: trailing-whitespace
      - id: end-of-file-fixer
      - id: check-yaml
      - id: check-added-large-files
      - id: check-merge-conflict
      - id: detect-private-key
      - id: check-ast  # Python syntax check

  # Custom quality gate for enhanced validation
  - repo: local
    hooks:
      - id: quality-gate
        name: Quality gate validation
        entry: bash src/pre_commit_hook.sh
        language: system
        pass_filenames: false
        always_run: true

  # Code complexity analysis with Lizard
  - repo: local
    hooks:
      - id: lizard
        name: Lizard (code complexity)
        entry: lizard
        language: python
        args: [
            '--modified', # Only analyze modified files
            '--warnings_only', # Only show warnings
            '--CCN',
            '10', # Warn if cyclomatic complexity > 10
            '--length',
            '100', # Warn if function length > 100
            '--arguments',
            '5', # Warn if function has > 5 arguments
          ]
        files: \.(py|js|java|cpp|go|rb|php|ts|swift|kt)$ # Extended language support

  # Python security checks with Bandit (official source)
  - repo: https://github.com/PyCQA/bandit
    rev: 1.7.5
    hooks:
      - id: bandit
        args: ['-r', '--configfile=.bandit.yml']
        exclude: tests/

  # Python code formatting with Black (official source)
  - repo: https://github.com/psf/black
    rev: 24.2.0
    hooks:
      - id: black

  # Python imports sorting with isort (official source)
  - repo: https://github.com/pycqa/isort
    rev: 5.13.2
    hooks:
      - id: isort
        name: isort (python)

  # Python linting with flake8 (official source)
  - repo: https://github.com/pycqa/flake8
    rev: 7.0.0
    hooks:
      - id: flake8
        additional_dependencies: [flake8-bugbear]
        args: ["--max-line-length=100", "--per-file-ignores=src/quality_gate.py:E501"]

  # JavaScript linting with ESLint (official source)
  - repo: https://github.com/pre-commit/mirrors-eslint
    rev: v8.56.0
    hooks:
      - id: eslint
        files: \.(js|ts|jsx|tsx)$
        types: [file]
        additional_dependencies:
          - eslint@8.56.0
          - eslint-plugin-security@2.1.0

  # Dependency security check using pip-audit (official source)
  - repo: https://github.com/pypa/pip-audit
    rev: v2.7.0
    hooks:
      - id: pip-audit
        args: ['--requirement', 'requirements.txt']

  # Semgrep for advanced pattern matching (official source)
  - repo: https://github.com/returntocorp/semgrep
    rev: v1.50.0
    hooks:
      - id: semgrep
        name: Semgrep
        args: ['--config', 'auto', '--error']
        exclude: tests/

  # Horusec security scanner (multi-language)
  - repo: local
    hooks:
      - id: horusec
        name: Horusec Security Scanner
        description: Multi-language security scanner
        entry: bash -c 'horusec start -p . --ignore="**/node_modules/**,**/vendor/**,**/.git/**,**/venv/**" || exit 0'
        language: system
        pass_filenames: false
        always_run: true
